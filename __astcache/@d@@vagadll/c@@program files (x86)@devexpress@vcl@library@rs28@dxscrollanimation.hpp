// CodeGear C++Builder
// Copyright (c) 1995, 2022 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'dxScrollAnimation.pas' rev: 35.00 (Windows)

#ifndef DxscrollanimationHPP
#define DxscrollanimationHPP

#pragma delphiheader begin
#pragma option push
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member 
#pragma pack(push,8)
#include <System.hpp>
#include <SysInit.hpp>
#include <System.SysUtils.hpp>
#include <dxAnimation.hpp>

//-- user supplied -----------------------------------------------------------

namespace Dxscrollanimation
{
//-- forward type declarations -----------------------------------------------
struct TdxRecordPixelScrollData;
template<typename T> class DELPHICLASS TdxCustomScrollAnimationHelper__1;
class DELPHICLASS TdxScrollAnimationHelper;
class DELPHICLASS TdxRecordPixelScrollAnimationHelper;
//-- type declarations -------------------------------------------------------
struct DECLSPEC_DRECORD TdxRecordPixelScrollData
{
public:
	int Index;
	int ScrollOffset;
	__fastcall TdxRecordPixelScrollData(int AIndex, int AOffset);
	TdxRecordPixelScrollData() {}
};


#pragma pack(push,4)
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TdxCustomScrollAnimationHelper__1 : public System::TObject
{
	typedef System::TObject inherited;
	
private:
	Dxanimation::TdxAnimationTransition* FAnimation;
	int FAnimationLength;
	bool FIsAnimationProcessing;
	int FPrevAnimatedPosition;
	T FStartPosition;
	T FTargetPosition;
	void __fastcall DestroyAnimation();
	void __fastcall InternalDoAnimation(Dxanimation::TdxAnimationTransition* Sender, int &APosition, bool &AFinished);
	void __fastcall InternalSetTargetPosition(T AValue);
	void __fastcall ResetTargetPosition();
	
protected:
	virtual void __fastcall AfterAnimationEnded(bool AIsRaiseEvent);
	virtual void __fastcall AnimationTerminated(System::TObject* Sender);
	virtual void __fastcall BeforeAnimationStarted();
	virtual T __fastcall CalculateAnimatedPosition(int &APosition) = 0 ;
	virtual int __fastcall CalculateScrollDelta(T AValue) = 0 ;
	virtual void __fastcall CheckPosition(T &AValue);
	virtual void __fastcall DoAnimation(Dxanimation::TdxAnimationTransition* Sender, int &APosition, bool &AFinished);
	virtual T __fastcall GetOwnerPosition() = 0 ;
	virtual T __fastcall GetUnassignedTargetPosition() = 0 ;
	virtual bool __fastcall IsAnimationActive();
	bool __fastcall IsAnimationProcessing();
	virtual bool __fastcall IsAnimationStartNeeded();
	virtual bool __fastcall IsEqual(T AValue1, T AValue2) = 0 ;
	virtual bool __fastcall IsPositionChanged(T AValue1, T AValue2);
	virtual void __fastcall PositionChanged();
	virtual void __fastcall SetTargetPosition(T AValue);
	virtual void __fastcall StopAnimation(bool AIsRaiseEvent);
	virtual void __fastcall UpdateOwnerPosition(T AValue) = 0 ;
	__property int AnimationLength = {read=FAnimationLength, nodefault};
	__property int PrevAnimatedPosition = {read=FPrevAnimatedPosition, nodefault};
	__property T StartPosition = {read=FStartPosition};
	__property T TargetPosition = {read=FTargetPosition};
	
public:
	__fastcall TdxCustomScrollAnimationHelper__1();
	__fastcall virtual ~TdxCustomScrollAnimationHelper__1();
	void __fastcall SetPosition(T AValue);
};

#pragma pack(pop)

#pragma pack(push,4)
class PASCALIMPLEMENTATION TdxScrollAnimationHelper : public TdxCustomScrollAnimationHelper__1<int>
{
	typedef TdxCustomScrollAnimationHelper__1<int> inherited;
	
protected:
	virtual int __fastcall CalculateAnimatedPosition(int &APosition);
	virtual int __fastcall CalculateScrollDelta(int AValue);
	virtual int __fastcall GetUnassignedTargetPosition();
	virtual bool __fastcall IsEqual(int AValue1, int AValue2);
public:
	/* {dxScrollAnimation}TdxCustomScrollAnimationHelper<System_Integer>.Create */ inline __fastcall TdxScrollAnimationHelper() : TdxCustomScrollAnimationHelper__1<int>() { }
	/* {dxScrollAnimation}TdxCustomScrollAnimationHelper<System_Integer>.Destroy */ inline __fastcall virtual ~TdxScrollAnimationHelper() { }
	
};

#pragma pack(pop)

#pragma pack(push,4)
class PASCALIMPLEMENTATION TdxRecordPixelScrollAnimationHelper : public TdxCustomScrollAnimationHelper__1<TdxRecordPixelScrollData>
{
	typedef TdxCustomScrollAnimationHelper__1<TdxRecordPixelScrollData> inherited;
	
protected:
	virtual TdxRecordPixelScrollData __fastcall GetUnassignedTargetPosition();
	virtual bool __fastcall IsEqual(const TdxRecordPixelScrollData &AValue1, const TdxRecordPixelScrollData &AValue2);
	virtual bool __fastcall IsPositionChanged(const TdxRecordPixelScrollData &AValue1, const TdxRecordPixelScrollData &AValue2);
public:
	/* {dxScrollAnimation}TdxCustomScrollAnimationHelper<dxScrollAnimation_TdxRecordPixelScrollData>.Create */ inline __fastcall TdxRecordPixelScrollAnimationHelper() : TdxCustomScrollAnimationHelper__1<TdxRecordPixelScrollData>() { }
	/* {dxScrollAnimation}TdxCustomScrollAnimationHelper<dxScrollAnimation_TdxRecordPixelScrollData>.Destroy */ inline __fastcall virtual ~TdxRecordPixelScrollAnimationHelper() { }
	
};

#pragma pack(pop)

//-- var, const, procedure ---------------------------------------------------
extern DELPHI_PACKAGE unsigned dxScrollAnimationTime;
}	/* namespace Dxscrollanimation */
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_DXSCROLLANIMATION)
using namespace Dxscrollanimation;
#endif
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// DxscrollanimationHPP
