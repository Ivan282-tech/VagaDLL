// CodeGear C++Builder
// Copyright (c) 1995, 2022 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'REST.Backend.Providers.pas' rev: 35.00 (Windows)

#ifndef Rest_Backend_ProvidersHPP
#define Rest_Backend_ProvidersHPP

#pragma delphiheader begin
#pragma option push
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member 
#pragma pack(push,8)
#include <System.hpp>
#include <SysInit.hpp>
#include <System.Classes.hpp>
#include <System.Generics.Collections.hpp>
#include <System.SysUtils.hpp>
#include <System.SyncObjs.hpp>
#include <REST.Backend.MetaTypes.hpp>
#include <System.Generics.Defaults.hpp>
#include <System.Types.hpp>

//-- user supplied -----------------------------------------------------------
#pragma link "REST.Backend.Providers"

namespace Rest
{
namespace Backend
{
namespace Providers
{
//-- forward type declarations -----------------------------------------------
__interface DELPHIINTERFACE IBackendProvider;
typedef System::DelphiInterface<IBackendProvider> _di_IBackendProvider;
__interface DELPHIINTERFACE IBackendService;
typedef System::DelphiInterface<IBackendService> _di_IBackendService;
__interface DELPHIINTERFACE IBackendApi;
typedef System::DelphiInterface<IBackendApi> _di_IBackendApi;
__interface DELPHIINTERFACE IBackendServiceComponent;
typedef System::DelphiInterface<IBackendServiceComponent> _di_IBackendServiceComponent;
class DELPHICLASS TBackendAPIThread;
template<typename T> class DELPHICLASS TBackendAPIThread__1;
class DELPHICLASS TBackendProviders;
__interface DELPHIINTERFACE IAuthAccess;
typedef System::DelphiInterface<IAuthAccess> _di_IAuthAccess;
__interface DELPHIINTERFACE IBackendAuthReg;
typedef System::DelphiInterface<IBackendAuthReg> _di_IBackendAuthReg;
class DELPHICLASS TBackendServiceComponent;
template<typename TI, typename T> class DELPHICLASS TBackendServiceComponent__2;
template<typename TI, typename T> class DELPHICLASS TBackendServiceComponentAuth__2;
//-- type declarations -------------------------------------------------------
__interface  INTERFACE_UUID("{C563AC66-8AF4-45D8-906C-161B061B912F}") IBackendProvider  : public System::IInterface 
{
	virtual System::UnicodeString __fastcall GetProviderID() = 0 ;
	__property System::UnicodeString ProviderID = {read=GetProviderID};
};

__interface  INTERFACE_UUID("{E8BD0783-0E4D-459F-9EEC-11B5F29FE792}") IBackendService  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{B2608078-946B-475D-B2DD-8523FDC1C773}") IBackendApi  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{085164DF-FCA7-45CD-BAC3-42C6B0B08170}") IBackendServiceComponent  : public System::IInterface 
{
	virtual _di_IBackendProvider __fastcall GetProvider() = 0 ;
	virtual GUID __fastcall GetServiceIID() = 0 ;
	__property _di_IBackendProvider Provider = {read=GetProvider};
	__property GUID ServiceIID = {read=GetServiceIID};
};

class PASCALIMPLEMENTATION TBackendAPIThread : public System::Classes::TPersistent
{
	typedef System::Classes::TPersistent inherited;
	
private:
	System::Classes::TNotifyEvent FOnStarting;
	System::Classes::TNotifyEvent FOnTerminated;
	
protected:
	virtual void __fastcall DoThreadStarting();
	void __fastcall OnThreadTerminate(System::TObject* Sender);
	virtual void __fastcall DoThreadTerminated();
	
public:
	__property System::Classes::TNotifyEvent OnStarting = {read=FOnStarting, write=FOnStarting};
	__property System::Classes::TNotifyEvent OnTerminated = {read=FOnTerminated, write=FOnTerminated};
public:
	/* TPersistent.Destroy */ inline __fastcall virtual ~TBackendAPIThread() { }
	
public:
	/* TObject.Create */ inline __fastcall TBackendAPIThread() : System::Classes::TPersistent() { }
	
};


// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TBackendAPIThread__1 : public TBackendAPIThread
{
	typedef TBackendAPIThread inherited;
	
	
public:
	/* [Template Alias] */
	#if defined(__clang__)
	using TExecuteEvent = void __fastcall (__closure *)(System::TObject* Sender, T AApi);
	#endif
	
	
private:
	class DELPHICLASS TInternalThread;
	// Template declaration generated by Delphi parameterized types is
	// used only for accessing Delphi variables and fields.
	// Don't instantiate with new type parameters in user code.
	class PASCALIMPLEMENTATION TInternalThread : public System::Classes::TThread
	{
		typedef System::Classes::TThread inherited;
		
	private:
		System::Sysutils::_di_TProc FProc;
		T FAPI;
		
	protected:
		virtual void __fastcall Execute();
		
	public:
		__fastcall TInternalThread(const T API, const System::Sysutils::_di_TProc AProc);
		__fastcall virtual ~TInternalThread();
	};
	
	
	
private:
	System::Classes::TThread* FThread;
	System::Syncobjs::TEvent* FEvent;
	System::DelphiInterface<System::Sysutils::TFunc__1<T> > FOnCreateAPI;
	T __fastcall CreateAPI();
	System::TObject* __fastcall GetFatalException();
	bool __fastcall GetStarted();
	bool __fastcall GetFinished();
	
protected:
#ifndef _WIN64
	typedef void __fastcall (__closure *_dt_Rest_Backend_Providers_1)(System::TObject* Sender, T AApi);
	System::Classes::TThread* __fastcall CreateThread(System::TObject* const ASender, const _dt_Rest_Backend_Providers_1 AEvent, const System::DelphiInterface<System::Sysutils::TProc__1<T> > AExecuteProc);
	typedef void __fastcall (__closure *_dt_Rest_Backend_Providers_2)(System::TObject* Sender, T AApi);
	void __fastcall Start(System::TObject* const ASender, const _dt_Rest_Backend_Providers_2 AEvent, const System::DelphiInterface<System::Sysutils::TProc__1<T> > AExecuteProc)/* overload */;
#else /* _WIN64 */
	System::Classes::TThread* __fastcall CreateThread(System::TObject* const ASender, const TExecuteEvent AEvent, const System::DelphiInterface<System::Sysutils::TProc__1<T> > AExecuteProc);
	void __fastcall Start(System::TObject* const ASender, const TExecuteEvent AEvent, const System::DelphiInterface<System::Sysutils::TProc__1<T> > AExecuteProc)/* overload */;
#endif /* _WIN64 */
	__property System::DelphiInterface<System::Sysutils::TFunc__1<T> > OnCreateAPI = {read=FOnCreateAPI, write=FOnCreateAPI};
	
public:
	__fastcall TBackendAPIThread__1();
	__fastcall virtual ~TBackendAPIThread__1();
	void __fastcall Start(const System::DelphiInterface<System::Sysutils::TProc__1<T> > AExecuteProc)/* overload */;
#ifndef _WIN64
	typedef void __fastcall (__closure *_dt_Rest_Backend_Providers_3)(System::TObject* Sender, T AApi);
	void __fastcall Start(System::TObject* const ASender, const _dt_Rest_Backend_Providers_3 AEvent)/* overload */;
#else /* _WIN64 */
	void __fastcall Start(System::TObject* const ASender, const TExecuteEvent AEvent)/* overload */;
#endif /* _WIN64 */
	void __fastcall WaitFor();
	__property System::TObject* FatalException = {read=GetFatalException};
	__property bool Started = {read=GetStarted, nodefault};
	__property bool Finished = {read=GetFinished, nodefault};
};


#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TBackendProviders : public System::TObject
{
	typedef System::TObject inherited;
	
	
public:
	typedef _di_IBackendService __fastcall (__closure *TFactoryMethod)(const _di_IBackendProvider AProvider, const GUID &IID);
	
	class DELPHICLASS TService;
#ifndef _WIN64
	#pragma pack(push,8)
#endif /* not _WIN64 */
	class PASCALIMPLEMENTATION TService : public System::TObject
	{
		typedef System::TObject inherited;
		
	private:
		GUID FIID;
#ifndef _WIN64
		System::DynamicArray<System::UnicodeString> FUnitNames;
#else /* _WIN64 */
		System::TArray__1<System::UnicodeString> FUnitNames;
#endif /* _WIN64 */
		TBackendProviders::TFactoryMethod FFactoryMethod;
		
	public:
		__property GUID IID = {read=FIID};
#ifndef _WIN64
		__property System::DynamicArray<System::UnicodeString> UnitNames = {read=FUnitNames};
#else /* _WIN64 */
		__property System::TArray__1<System::UnicodeString> UnitNames = {read=FUnitNames};
#endif /* _WIN64 */
		__property TBackendProviders::TFactoryMethod FactoryProc = {read=FFactoryMethod};
	public:
		/* TObject.Create */ inline __fastcall TService() : System::TObject() { }
		/* TObject.Destroy */ inline __fastcall virtual ~TService() { }
		
	};
	
#ifndef _WIN64
	#pragma pack(pop)
#endif /* not _WIN64 */
	
	class DELPHICLASS TProvider;
	class PASCALIMPLEMENTATION TProvider : public System::TObject
	{
		typedef System::TObject inherited;
		
	private:
		System::UnicodeString FProviderID;
		System::UnicodeString FDisplayName;
		System::Generics::Collections::TList__1<TBackendProviders::TService*>* FServices;
		TBackendProviders::TService* __fastcall GetService(int I);
		int __fastcall GetCount();
		
	public:
		__fastcall TProvider();
		__fastcall virtual ~TProvider();
		TBackendProviders::TService* __fastcall FindService(const GUID &IID);
		__property System::UnicodeString ProviderID = {read=FProviderID};
		__property System::UnicodeString DisplayName = {read=FDisplayName};
		__property int Count = {read=GetCount, nodefault};
		__property TBackendProviders::TService* Services[int I] = {read=GetService};
	};
	
	
	
private:
	static TBackendProviders* FInstance;
	System::Generics::Collections::TList__1<TProvider*>* FProviders;
	static TBackendProviders* __fastcall GetInstance();
	int __fastcall GetCount();
	TProvider* __fastcall GetProvider(int I);
	
public:
	__fastcall TBackendProviders();
	__fastcall virtual ~TBackendProviders();
	void __fastcall Register(const System::UnicodeString AProviderID, const System::UnicodeString ADisplayName);
	void __fastcall Unregister(const System::UnicodeString AProviderID);
#ifndef _WIN64
	void __fastcall RegisterService(const System::UnicodeString AProviderID, const GUID &AIID, const TFactoryMethod AFactory, const System::DynamicArray<System::UnicodeString> AUnitNames);
#else /* _WIN64 */
	void __fastcall RegisterService(const System::UnicodeString AProviderID, const GUID &AIID, const TFactoryMethod AFactory, const System::TArray__1<System::UnicodeString> AUnitNames);
#endif /* _WIN64 */
	void __fastcall UnregisterService(const System::UnicodeString AProviderID, const GUID &IID);
	TProvider* __fastcall FindProvider(const System::UnicodeString AProviderID);
	TService* __fastcall FindService(const System::UnicodeString AProviderID, const GUID &IID);
	__property int Count = {read=GetCount, nodefault};
	__property TProvider* Providers[int I] = {read=GetProvider};
	/* static */ __property TBackendProviders* Instance = {read=GetInstance};
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

enum class DECLSPEC_DENUM TBackendAuthentication : unsigned char { Default, Root, Application, User, Session, None };

enum class DECLSPEC_DENUM TBackendDefaultAuthentication : unsigned char { Root, Application, User, Session, None };

__interface  INTERFACE_UUID("{E4F2AAC7-A81B-40E5-AF79-F60505B3C0A9}") IAuthAccess  : public System::IInterface 
{
	virtual void __fastcall Login(const Rest::Backend::Metatypes::TBackendEntityValue &ALogin) = 0 ;
	virtual void __fastcall Logout() = 0 ;
	virtual void __fastcall SetAuthentication(const TBackendAuthentication Value) = 0 ;
	virtual void __fastcall SetDefaultAuthentication(const TBackendDefaultAuthentication Value) = 0 ;
	virtual _di_IBackendProvider __fastcall GetProvider() = 0 ;
	__property _di_IBackendProvider Provider = {read=GetProvider};
};

__interface  INTERFACE_UUID("{6EB1DC55-C0C7-434D-8CE7-CD6F215A1B6F}") IBackendAuthReg  : public System::IInterface 
{
	virtual void __fastcall RegisterForAuth(const _di_IAuthAccess AAuthAccess) = 0 ;
	virtual void __fastcall UnregisterForAuth(const _di_IAuthAccess AAuthAccess) = 0 ;
};

class PASCALIMPLEMENTATION TBackendServiceComponent : public System::Classes::TComponent
{
	typedef System::Classes::TComponent inherited;
	
private:
	_di_IBackendProvider FProvider;
	_di_IBackendProvider __fastcall GetProvider();
	
protected:
	virtual void __fastcall ProviderChanged();
	_di_IBackendService __fastcall CreateService(const _di_IBackendProvider AProvider);
	void __fastcall SetProvider(const _di_IBackendProvider Value);
	virtual GUID __fastcall GetBackendServiceIID() = 0 ;
	virtual void __fastcall UpdateProvider(const _di_IBackendProvider AProvider) = 0 ;
	virtual void __fastcall Notification(System::Classes::TComponent* AComponent, System::Classes::TOperation Operation);
	virtual void __fastcall ClearProvider();
	
public:
	__fastcall virtual TBackendServiceComponent(System::Classes::TComponent* AOwner);
	__property GUID ServiceIID = {read=GetBackendServiceIID};
	__property _di_IBackendProvider Provider = {read=GetProvider, write=SetProvider};
public:
	/* TComponent.Destroy */ inline __fastcall virtual ~TBackendServiceComponent() { }
	
private:
	void *__IBackendServiceComponent;	// IBackendServiceComponent 
	
public:
	#if defined(MANAGED_INTERFACE_OPERATORS)
	// {085164DF-FCA7-45CD-BAC3-42C6B0B08170}
	operator _di_IBackendServiceComponent()
	{
		_di_IBackendServiceComponent intf;
		this->GetInterface(intf);
		return intf;
	}
	#else
	operator IBackendServiceComponent*(void) { return (IBackendServiceComponent*)&__IBackendServiceComponent; }
	#endif
	
};


// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename TI, typename T> class PASCALIMPLEMENTATION TBackendServiceComponent__2 : public TBackendServiceComponent
{
	typedef TBackendServiceComponent inherited;
	
	
public:
	/* [Template Alias] */
	#if defined(__clang__)
	using TExecuteEvent = void __fastcall (__closure *)(System::TObject* Sender, T AAPI);
	#endif
	
	
private:
	TI FBackendService;
	T FBackendServiceAPI;
	TBackendAPIThread__1<T>* FAPIThread;
	HIDESBASE TI __fastcall CreateService(const _di_IBackendProvider AProvider);
	void __fastcall SetAPIThread(TBackendAPIThread__1<T>* const AValue);
	
protected:
	T __fastcall GetBackendServiceAPI();
	TI __fastcall GetBackendService();
	virtual void __fastcall ClearProvider();
	virtual GUID __fastcall GetBackendServiceIID();
	virtual void __fastcall UpdateProvider(const _di_IBackendProvider AValue);
	virtual T __fastcall InternalCreateBackendServiceAPI() = 0 ;
	virtual T __fastcall InternalCreateIndependentBackendServiceAPI();
	
public:
	__fastcall virtual TBackendServiceComponent__2(System::Classes::TComponent* AOwner);
	__fastcall virtual ~TBackendServiceComponent__2();
	__property TBackendAPIThread__1<T>* APIThread = {read=FAPIThread, write=SetAPIThread};
};


// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename TI, typename T> class PASCALIMPLEMENTATION TBackendServiceComponentAuth__2 : public TBackendServiceComponent__2<TI,T>
{
	typedef TBackendServiceComponent__2<TI,T> inherited;
	
private:
	_di_IBackendAuthReg FAuth;
	_di_IAuthAccess FAuthAccess;
	void __fastcall SetAuth(const _di_IBackendAuthReg Value);
	
protected:
	virtual _di_IAuthAccess __fastcall CreateAuthAccess();
	virtual void __fastcall Notification(System::Classes::TComponent* AComponent, System::Classes::TOperation Operation);
	
public:
	__fastcall virtual ~TBackendServiceComponentAuth__2();
	__property _di_IBackendAuthReg Auth = {read=FAuth, write=SetAuth};
public:
	/* {REST_Backend_Providers}TBackendServiceComponent<REST_Backend_Providers_TBackendServiceComponentAuth<TI,T>_TI,REST_Backend_Providers_TBackendServiceComponentAuth<TI,T>_T>.Create */ inline __fastcall virtual TBackendServiceComponentAuth__2(System::Classes::TComponent* AOwner) : TBackendServiceComponent__2<TI,T>(AOwner) { }
	
};


//-- var, const, procedure ---------------------------------------------------
}	/* namespace Providers */
}	/* namespace Backend */
}	/* namespace Rest */
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_REST_BACKEND_PROVIDERS)
using namespace Rest::Backend::Providers;
#endif
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_REST_BACKEND)
using namespace Rest::Backend;
#endif
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_REST)
using namespace Rest;
#endif
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// Rest_Backend_ProvidersHPP
