// CodeGear C++Builder
// Copyright (c) 1995, 2022 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'REST.Backend.ServiceFactory.pas' rev: 35.00 (Windows)

#ifndef Rest_Backend_ServicefactoryHPP
#define Rest_Backend_ServicefactoryHPP

#pragma delphiheader begin
#pragma option push
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member 
#pragma pack(push,8)
#include <System.hpp>
#include <SysInit.hpp>
#include <System.Classes.hpp>
#include <System.SysUtils.hpp>
#include <REST.Backend.Providers.hpp>

//-- user supplied -----------------------------------------------------------

namespace Rest
{
namespace Backend
{
namespace Servicefactory
{
//-- forward type declarations -----------------------------------------------
class DELPHICLASS TProviderServiceFactory;
template<typename T> class DELPHICLASS TProviderServiceFactory__1;
//-- type declarations -------------------------------------------------------
#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TProviderServiceFactory : public System::TObject
{
	typedef System::TObject inherited;
	
private:
	System::UnicodeString FProviderID;
#ifndef _WIN64
	System::DynamicArray<System::UnicodeString> FUnitNames;
#else /* _WIN64 */
	System::TArray__1<System::UnicodeString> FUnitNames;
#endif /* _WIN64 */
	
protected:
	virtual Rest::Backend::Providers::_di_IBackendService __fastcall CreateService(const Rest::Backend::Providers::_di_IBackendProvider AProvider, const GUID &IID) = 0 ;
	virtual GUID __fastcall GetServiceIID() = 0 ;
	
public:
	__fastcall TProviderServiceFactory(const System::UnicodeString AProviderID)/* overload */;
	__fastcall TProviderServiceFactory(const System::UnicodeString AProviderID, const System::UnicodeString AUnitName)/* overload */;
	void __fastcall Register();
	void __fastcall Unregister();
public:
	/* TObject.Destroy */ inline __fastcall virtual ~TProviderServiceFactory() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TProviderServiceFactory__1 : public TProviderServiceFactory
{
	typedef TProviderServiceFactory inherited;
	
protected:
	virtual GUID __fastcall GetServiceIID();
public:
	/* TProviderServiceFactory.Create */ inline __fastcall TProviderServiceFactory__1(const System::UnicodeString AProviderID)/* overload */ : TProviderServiceFactory(AProviderID) { }
	/* TProviderServiceFactory.Create */ inline __fastcall TProviderServiceFactory__1(const System::UnicodeString AProviderID, const System::UnicodeString AUnitName)/* overload */ : TProviderServiceFactory(AProviderID, AUnitName) { }
	
public:
	/* TObject.Destroy */ inline __fastcall virtual ~TProviderServiceFactory__1() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

//-- var, const, procedure ---------------------------------------------------
}	/* namespace Servicefactory */
}	/* namespace Backend */
}	/* namespace Rest */
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_REST_BACKEND_SERVICEFACTORY)
using namespace Rest::Backend::Servicefactory;
#endif
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_REST_BACKEND)
using namespace Rest::Backend;
#endif
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_REST)
using namespace Rest;
#endif
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// Rest_Backend_ServicefactoryHPP
